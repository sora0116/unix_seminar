#set page(numbering: "1")
#set heading(numbering: "1.1")
#set text(size: 12pt, font: ("New Computer Modern", "Harano Aji Mincho"))

#outline(title: "目次")

= デバッガ
プログラムのバグ(bug)を取り除く(de-)ことをデバッグといいます。デバッグを行う手法はいくつかあり、例えばプログラム中に標準出力を行う命令を追加してデバッグを行うprintデバッガと呼ばれる方法があります。デバッガはデバッグを支援するツールで、プログラムの任意箇所での停止や、変数の値の表示や変更、スタックトレースやメモリ内容の監視など高度な機能によりデバッグを支援します。

C言語で書かれたプログラムに対応するデバッガはいくつか存在しており、有名なものにGDBとLLDBが存在します。このドキュメントではこの二つのデバッガについて基本的な使用方法の解説を行います。

= GDB
GDBはGnu Projectのデバッガです。

== GDBの起動
GDBを起動するには以下のいづれかのコマンドを使用します。起動後はコマンドを受け付けます。
`
	gdb [options] [executable-file [core-file or process-id]]
	gfb [options] --args <executable-file> [inferior-arguments ...]
`
`--args` を指定する場合、実行可能ファイルの後の引数(inferior-arguments) が実行時に渡されます。例えば `gdb --args gcc -O2 -c foo.c` は `gcc -O2 -c foo.c` の実行にデバッガをアタッチします。

optionsに指定できるオプションは `gdb -h` で確認できます。

=== ファイルオプション
GDBが起動すると、options以外の引数は実行ファイルとコアファイル(またはプロセスID)を指定するものとして読まれます。つまり`-se`、`-c` としてです。

/ `-symbols <file>, -s <file>`:
fileからシンボルテーブルを読み取ります。
/ `-exec <file>, -e <file>`: 
fileを実行ファイルとして読み込みます。
/ `-se <file>`: 
fileからシンボルテーブルを読み取り、実行ファイルとして使用します。
/ `-core <file>, -c <file>`: 
fileをコアダンプとして検査します。
/ `-pid <number>, -p <number>`: 
プロセスIDがnumberのプロセスにアタッチします。
/ `-command <file>, -x <file>`: 
fileからコマンドを実行します。
/ `-eval-command <command>, -ex <command>: `: 
単一のGDBコマンドを実行します。複数回指定可能です。
/ `-init-command <file>, -ix <file>`: 
下位ファイルをロードする前かつgdbinitロード後にfileからコマンドを実行します。
/ `-init-eval-command <command>, -iex <command>`: 
下位ファイルをロードする前かるgdbinitロード後にGDBコマンド`command`を実行します。
/ `-early-init-command <file>, -eix <file>`: 
出力生成前にファイルからコマンドを実行します。
/ `-early-init-eval-command <command>, -eiex <command>`: 
出力生成前にGDBコマンド`command`を実行します。
/ `-directory <directory>, -d <directory>`: 
directoryをソースファイルとスクリプトファイルを検索するパスに追加します。
/ `-readnow, -r`: 
各シンボルファイルのシンボルテーブル全体を起動時に読み取ります。デフォルトではこの機能はオフになっています。
/ `--readnever`: 
各シンボルファイルのシンボルテーブルを読み取らないようにします。このオプションをつけるとシンボリックデバッグが実行できなくなります。

=== モードオプション
GDBはさまざまなモードで実行できます。
/ `-nx, -n`: 
初期化ファイルにあるコマンドを実行しません。
/ `-nh`: 
ホームディレクトリ初期化ファイルにあるコマンドを実行しません。システム全体及びカレントディレクトリの初期化ファイルは実行されます。
/ `-quiet, -silent, -q`: 
起動時のメッセージを表示しません。これらメッセージはバッチモードでも表示されません。コマンドによりこのオプションを有向化することもできます。
/ `-batch`: 
バッチモードで実行します。`-x`で指定したコマンドファイルのコマンドがすべて実行された後、終了コード0を返して終了します(`-n`が指定されていない場合は初期化ファイルのコマンドも実行されます)。ファイル内のコマンド実行中にエラーが発生した場合は0以外のステータスコードを返して終了します。
/ `-batch-silent`: 
バッチモードで実行し、かつ全く標準出力への出力を行いません。
/ `-return-child-result`: 
GDBの終了ステータスをデバッグ中のプロセスの終了コードにします。ただし(1)GDBが異常終了した場合、(2)ユーザが明示的に終了ステータスを指定した場合、(3)子プロセスが実行されないか終了しない場合(終了ステータスは-1になる)の三つの場合を除きます。
/ `-nowindows, -nw`: 
GDBにGUIインターフェースがある場合、CUIのみを使用するように指定します。
/ `windows, -w`: 
GDBにGUIインターフェースがある場合、GUIインターフェースを使用します。
/ `-cd <directory>`: 
作業ディレクトリを`directory`に移動して実行します。
/ `-data-directory <directory>, -D <directory>`: 
`directory`をデータディレクトリ(GDBが補助ファイルを検索する場所)として実行します。
/ `-fullname, -f`: 
スタックフレーム表示時およびプロセス停止時に完全なファイル名と行番号を出力します。
/ `-annotate <level>`: 
GDB内の注釈レベルを設定します。これはプロンプト、式の値、ソース行、その他の出力とともにGDBが出力する情報の量を制御します。レベル0が通常、1がGnu Emacsで使用され非推奨、レベル3は最大の注釈です。
/ `--args`: 
実行ファイル以降の引数をすべて下位のコマンドライン引数として渡します。
/ `--baud <bps>, -b <bps>`: 
GDBがリモートデバッグに使用するシリアルインターフェイスの回線速度を設定します。
/ `-l <timeout>`: 
GDBがリモートデバッグに使用する通信のタイムアウト(単位:秒)を設定します。
/ `-tty <device>, -t <device>`: 
プログラムの標準入力と出力に`device` を使用して実行します。
/ `-tui`: 
TUI(Text User Interfaec) モードをアクティブにします。TUIはターミナル上の複数のテキストウィンドウを管理し、ソース、アセンブリ、レジスタ、およびコマンド出力を表示します。
/ `-interpreter <interp>`: 
制御プログラムまたはデバイスとのインターフェイスにインタープリター`interp`を使用します。このオプションはGDBをバックエンドとしてGDBと津伸によって設定されることを目的としています。
/ `-write`: 
実行ファイルとコアファイルを読み取り書き取りの両方で開きます。
/ `-statistics`: 
GDBは各コマンドを完了してプロンプトに戻った後、時間とメモリ使用量に関する統計情報を表示します。
/ `-configuration`: 
GDBはビルド時の構成パラメータの詳細を出力し、終了します。


=== 起動にGDBが行う動作
セッション起動時にGDBが行う処理を以下に示します。
1. 基本的な内部状態を初期化します。
2. ホームディレクトリにある初期初期化ファイルが存在する場合、コマンドを読み取ります。
3. `-eiex`と`-eix`で指定されたコマンドとコマンドファイルを指定された順番に実行します。
4. コマンドラインで指定されたコマンドインタープリターを設定します。
5. システム全体の初期化ファイルと初期化ディレクトリからファイルを読み取ります。
6. ホームディレクトリ内の初期化ファイルを読み取り、ファイル内のすべてのコマンドを実行します。
7. `-iex`および`-ix`で指定されたコマンドとコマンドファイルを指定された順番に実行します。通常`-ex`および`-x`を代わりに使用します。この方法ではGDB初期化ファイルが実行される前およびinferiorがロードされる前に設定を適用できます。
8. コマンドラインオプションとオペランドを処理します。
9. 現在の作業ディレクトリにある初期化ファイルを読み込んで実行します。
10. デバッグするまたはアタッチするプログラムまたはコアファイルが指定されている場合、GDBはプログラムまたはそのロードされた共有ライブラリ用に提供された自動ロードスクリプトをロードします。
11. `-ex`および`-x`で指定されたコマンド及びコマンドファイルを読み込んで実行します。
12. _history file_に記録されたコマンド履歴を読み取ります。

=== 初期化ファイル
GDB起動時にGDBはいくつかの初期化ファイルからコマンドを実行します。これらの初期化ファイルはコマンドファイルと同じ構文を使用し、同様に処理されます。

起動時にロードされる初期化ファイルのリストをロードされる順番で表示するには`gdb --help`が使用できます。

初期初期化ファイルは初期化プロセスの非常に速い段階でロードされます。ここでは`set`または`source`コマンドのみを配置できます。

ほかの一般の初期化ファイルは任意のコマンドを実行できます。

==== ホームディレクトリの初期初期化ファイル
GDBは最初にこれを探します。GDBがホームディレクトリ内を検索する場所はいくつかあり、これらの場所は順番に検索され、最初に見つかったファイルのみをロードします。MacOS以外では以下の場所が検索されます。
- `$XDG_CONFIG_HOME/gdb/gdbealyinit`
- `$HOME/.config/gdb/gdbealyinit`
- `$HOME/.gdbealyinit`
`-nx, -n`オプションでこれらの初期初期化ファイルを読むことを阻止できます。

==== システム全体の初期化ファイル
以下の二か所が検索され、これらは常にチェックされます。
/ `system.gdbinit`:
単一のシステム全体初期化ファイルです。 `--with-system-gdbinit` オプションで設定できます。
/ `system.gdbinit.d`: 
ディレクトリです。

==== ホームディレクトリ初期化ファイル
システム全体初期化ファイルを読んだ後、これを探します。以下の場所を検索し、最初に見つかったファイルのみをロードします。
MacOS以外では以下の場所が検索されます。
- `$XDG_CONFIG_HOME/gdb/gdbinit`
- `$HOME/.config/gdb/gdbinit`
- `$HOME/.gdbinit`

==== ローカルディレクトリ初期化ファイル
カレントディレクトリで`.gdbinit`ファイルを検索します。`-x, -ex`で指定したコマンドを除いて最後にロードされます。すでにホームディレクトリ初期化ファイルとして読み込まれている場合は再度ロードされることはありません。

== GDBの終了
GDBを終了するには `quit [expression]`, `exit [expression]` または `q` または `ctrl+d` で終了できます。`expression` に指定した値は終了コードとして帰ります。`ctrl+c`は実行中のGDBコマンドアクションを終了します。

== シェルコマンド
GDB起動中にシェルコマンドを使用することができます。
`
	shell <command-string>
	!<command-string>
`
`pipe` 命令を使用してgdbの出力を他のプログラムに繋ぐことができます。
`
	pipe [command] | <shell_command>
	| [command] | <shell_command>
	pipe -d <delim> <command> <delim> <shell_command>
	| -d <delim> <command> <delim> <shell_command>
`
`command` が `|` を含むときには -d で別の記号(列)を指定します。

== ロギング出力
GDBの出力をファイルに行うことができます。GDBにはロギングを制御するコマンドがいくつか用意されています。

/ `set loggging enabled [on|off]`: ロギングのオンオフ切り替え
/ `set logging file <file>`: 現在のログファイルの名前を変更。デフォルト値は `gdb.txt`
/ `set logging overwrite [on|off]`: 上書きか書き足しか(onで上書き)。デフォルト値は `off`
/ `set logging redirect [on|off]`: onにするとGDBの出力がログファイルにのみ行われる。デフォルト値は `off`
/ `set logging debugredirect [on|off]`: onにするとGDBデバッグの出力がログファイルにのみ行われる。デフォルト値は `off`
/ `show logging`: ロギングの設定を表示する

= GDBコマンド
GDBコマンドは曖昧性がなければコマンド名の最初の数文字のみで使用できます。また、`ret`(エンター)を入力すると特定のGDBコマンドを繰り返し実行できます。また、TABキーによる補完機能が有効です。

== コマンド構文
GDBコマンドは一行の長さ無制限の入力です。`command [args]` の形をしています。

`run` など一部コマンドを除いて空白行を入力すると直前のコマンドを繰り返します。`list` 及び `x` コマンドでは引数が変わります(???)。

== コマンド設定
多くのコマンドは変数及び設定で動作が変わります。これらの設定は `set` コマンドで変更できます。

gdbinitファイルに書き込むことで初期化時に設定できますし、対話中にコマンドを実行して設定することもできます。

`with`コマンドを使用して、コマンド呼び出しの期間中一時的に設定を変更することもできます。
`
	with <setting> [value] [-- command]
	w <setting> [value] [-- command]
`

== コマンド補完
GDBではTABキーによる補完が有効です。候補が唯一の場合は自動で入力が保管され、複数ある場合は候補が表示されます。TABを二回押して候補を表示する代わりに`esc ?`で表示することもできます。

以下のコマンドで補完候補の最大数を設定できます。デフォルト値は200です。
`
	set max-completions <limit>
`
`limit`には整数値または`unlimited`が指定できます。
`
	show max-completions
`
で現在の設定を確認できます。

== ファイル名引数
ファイル名をコマンドの引数として渡す場合、ファイル名に空白、ダブルクォート、シングルクォートが含まれていない場合は単純な文字列として記述できます。これらが含まれている場合、いくつか方法があります。

- GDBに任せる
- エスケープを使う
- クオートで囲う

== コマンドオプション
一部コマンドは先頭に`-`がついたオプションを受け付けます。コマンド名と同様に、明確な場合は省略形を使うことができます。また、補完も効きます。

一部コマンドの引数にハイフンを含む場合は`--`を使うことでそれ以降の引数をオプションとして解釈しなくなります。

== ヘルプ
`help` コマンドを使用してコマンドのヘルプを閲覧できます。
`
	help, h
`
引数なしのhelpコマンドはコマンドのクラスのリストを表示します。
`
	help <class>
`
ヘルプクラスを指定するとそのクラスの個々のコマンドのリストを表示します。
`
	help <command>
`
コマンドを指定するとそのコマンドの短い使用方法を表示します。
`
	apropos [-v] <regexp>
`
コマンド、エイリアス及びそのドキュメントを検索し、引数で指定した正規表現を検索します。見つかったすべてを表示します。`-v`オプションをつけるとドキュメントの一致部分をハイライトして表示します。
`
	complete <args>
`
コマンドの先頭部分の一致候補を表示します。

`info, show. set`コマンドを使用して、プログラムの状態やGDBの状態を設定および照会することができます。
`
	info, i
`
プログラムの状態を表示します。`help info`でサブコマンドの一覧を閲覧できます。
`
	set
`
式の結果を環境変数に割り当てます。
`
	show
`
GDBの状態を表示します。`set`できるものは大体`show`できます。

`show`にあって`set`できないものを以下に示します。
- `version`
バージョン情報を表示します。
- `copying`
著作権表示を行います。
- `warranty`
保証情報を表示します。
- `configuration`
GDBのビルド情報を表示します。

= GDBでプログラムを実行する
GDBでプログラムを実行するにはコンパイル時にデバッグ情報を付与する必要があります。

任意の環境で、引数を指定してGDBを起動できます。ネイティブデバッグではプログラムのIOをリダイレクトしたり、実行中プロセスをデバッグしたり、子プロセスを強制終了したりできます。

== デバッグのためのコンパイル
プログラムを効果的にデバッグするにはコンパイル時にデバッグ情報を生成する必要があります。この情報はオブジェクトファイルに保存され、各変数、関数のデータ型と実行可能コード内のソース行番号とアドレスの対応関係が記述されます。

デバッグ情報の生成は`-g`オプションで行うことができます。

GCCでは`-g`オプションは`-O`(最適化オプション)と併用できます。

== プログラムの開始
/ `run, r`: 
GDBでプログラムを実行するには`run`コマンドを使用します。このコマンドを使用するにはGDB起動時またはコマンドでプログラムを指定する必要があります。

/ 引数:
`run`コマンドの引数はそのままプログラムのコマンドライン引数として渡されます。

/ 環境:
プログラムはGDBから環境を継承します。`set`コマンドで環境を変更することもできます。

/ 作業ディレクトリ:
`set cwd`でプログラムの作業ディレクトリを設定できます。設定しない場合、GDBの作業ディレクトリを引き継ぎます。リモートデバッグの場合にはリモートサーバの作業ディレクトリを引き継ぎます。

/ 標準入出力:
通常、プログラムの標準入出力はGDBと同じになります。`tty`コマンドで別のデバイスを設定することもできます。

`run`コマンドで実行したプログラムは直ちに実行を開始します。

GDBはシンボルファイルの変更を検出し、再読み込みを行います。

`
	start
`
`start`コマンドはメインプロシージャにブレークポイントを設置して`run`します。引数の扱いは`run`と同様です。
`
	starti
`
`start`と同様ですが、ブレークポイントの位置は最初の命令です。
`
	set exec-wrapper <wrapper>
	show exec-wrapper
	unset exec-wrapper
`
<wrapper>を使用してデバッグ用プログラムの起動します。つまりShellコマンド`exec wrapper program`を実行します。

`
	set startip-with-shell
	set startip-with-shell on
	set startip-with-shell off
	show startip-with-shell
`
プログラムをシェルで実行します。
`
  set auto-connect-native-target
  set auto-connect-native-target on
  set auto-connect-native-target off
  show auto-connect-native-target
`
現在の下位プロセスがターゲットに接続されていないときにローカルマシンで実行します。
`
  set disable-randomization
  set disable-randomization on
`
プログラムの仮想アドレス空間のネイティブランダム化をオフにします。

== プログラムの引数
プログラムへの引数は`run`コマンド実行時に指定します。指定しなかった場合は以前の`run`実行時の引数または`set args`で指定した引数を使用します。
`
	set args
	show args
`

== プログラムの環境
環境は、環境変数とその値のことを指します。
`
	path <directory>
`
環境変数の先頭にディレクトリを追加します。GDBが使用する環境変数の値は変化しません。
`
	show paths
`
実行可能ファイルの検索パスのリストを表示します。
`
	show environment [varname]
`
環境変数`varname`の値を表示します。指定しない場合はすべての環境変数とその値を表示します。
`
	set environment varname [=value]
`
環境変数`varname`の値を設定します。値はプログラムに対してのみ変更され、GDBが読む変数の値は変わりません。

== プログラムの作業ディレクトリ
`
	set cwd [directory]
`
下位の作業ディレクトリを`directory`に変更します。
`
	show cwd
`
下位プロセスの作業ディレクトリを表示します。
`
	cd
`
GDBの作業ディレクトリを変更します。
`
	pwd
`
GDBの作業ディレクトリを表示します。

== プログラムの入出力
デフォルトではGDBが実行するプログラムはGDBと同じターミナルに入出力を行います。
`
	info terminal
`
プログラムが使用している端末モードについての情報を表示します。

	`run`コマンドでシェルのリダイレクト機能を使えます。
`
	run > <output file>
`
`tty`コマンドで入出力の場所を指定できます。
`
	tty <file>
`
`
	set inferior-tty <tty>
	show inferior-tty
`
デバッグ対象のプログラムのttyを設定、表示します。

== すでに実行中のプロセスのデバッグ
`
	attach <pid>
`
すでに実行中のプロセスのプロセスIDを指定してデバッガをアタッチします。
`
	set exec-file-mismatch 'ask|warn|off'
	show exec-file-mismatch
`
GDBがロードした実行ファイルとアタッチしたプログラムの実行ファイルが一致するか確認した際に不一致だった場合の挙動を設定します。
askは警告を出しプロセスの実行ファイルをロードするか確認します。warnは警告を表示のみします。offは不一致確認を行いません。

GDBはプロセスにアタッチするとそのプロセスを停止します。続行するには`continue`をします。
`
	detach
`
プロセスからデタッチします。

== 子プロセスの終了
`
	kill
`
GDBで実行されている子プロセスを終了します。

== 複数の下位接続とプログラムのデバッグ
GDBでは1セッションで複数のプログラムを実行、デバッグできます。一部システムでは同時に行えます。

GDBでは各プログラムの状態をinferiorと呼ばれるオブジェクトで管理します。
`
	info inferior
`
現在存在するinferiorを表示します。
`
	inferior
`
現在のinferiorの情報を表示します。
`
	info connection
`
現在開いているターゲット接続を表示します。
`
	inferior <infno>
`
現在のinferiorをinfnoに変更します。
`
	add-inferior [-copies <n>] [-exec <executable>] [-no-connection]
`
実行ファイルを`executable`とするinferiorをn個追加します。
`
	clone-inferior [-copies <n>] [infno]
`
inferiorをn個コピーします。
`
	remove-inferiors infno...
`
inferiorを削除します。
`
	detach inferior infno...
	kill inferior infno...
`
inferiorを指定してdetach, killします。
`
	set print inferior-events [on|off]
	show print inferior-events
	
`
inferiorのプロセスが開始または終了したときに通知を受け取ります。
`
	maint info program-spaces
`
GDBによって管理されているすべてのプログラムスペースのリストを出力します。

=== inferior固有のブレークポイント
複数のinferiorプロセスをデバッグする場合、すべてのinferiorプロセスにブレークポイントを設定するか、個別にするか選択できます。
`
	break <locspace> inferior inferior-id
	break <locspace> inferior inferior-id if ...
`

== 複数スレッドのプログラムのデバッグ
GDBはマルチスレッドデバッグを行うために以下の機能を提供します。
- 新しいスレッドの自動通知
- スレッドを切り替えるコマンド
- 既存のスレッドの情報を表示するコマンド
- スレッドのリストにコマンドを適用するコマンド
- スレッド固有のブレークポイント
- スレッド開始、終了時のメッセージ設定
GDBでは複数スレッドを観察できます。今見えているスレッドをカレントスレッドといいます。デバッグコマンドはカレントスレッドに適応されます。

新しいスレッドを検出するとスレッド識別子を表示します。

`
	info threads [-gid] [thread-id-list]
`
スレッドの情報を表示します。引数を指定しなければすべてのスレッドの情報が表示されます。`-gid`を指定するとグローバルスレッド番号も表示します。
`
	thread <tid>
`
カレントスレッドを`tid`のスレッドに変更します。
`
	thread apply [thread-id-list | all [-ascending]] [flag]... <command>
`
指定したスライド全体にコマンドを適用します。フラグに設定できるのは以下のとおりです。
/ `-c`: コマンド内のエラーを表示してその後のコマンドは続行されます。
/ `-s`: コマンド内のエラーを無視します。
/ `-q`: スレッド情報を表示しません。
`
	taas [option]... <command>
`
`thread apply all -s [option]... <command>`のショートカット。
`
	tfaas [option]... <command>
`
`thread apply all -s -- frame apply all -s [option]... <command>`のショートカット。
`
	thread name [name]
`
カレントスレッドに名前をつけます。名前を指定しない場合は名前を削除します。
`
	thread find [regexp]
`
指定した正規表現と一致する名前またはシステムタグを持つスレッドを検索して表示します。
`
	set print thread-event [on|off]
	show print thread-event
`
スレッド開始、終了時のメッセージを有効または無効にします。

== フォークのデバッグ
`
	set follow-fork-mode <mode>
`
forkの呼び出しに対する応答を設定します。
- `parent`
	元のプロセスはforkのあとデバッグされます。子プロセスは妨げられずに実行されます。デフォルト。
- `child`
	新しいプロセスがforkのあとにデバッグされます。親プロセスは妨げられずに実行されます。
`
	set detach-on-fork 'on|off'
`
- `on`
	子プロセスは切り離され、独立して実行されます。(デフォルト)
- `off`
	両方のプロセスがGDBの制御化に置かれます。片方のプロセスは中断されます。(別inferior)

== チェックポイント、再起動
デバッグ中の状態にチェックポイントをおいて戻ることができます。
`
	checkpoint
`
現在の状態にチェックポイントを起きます。
`
	info checkpoint
`
設置されたチェックポイントの一覧を表示します。
`
	restart <checkpoint-id>
`
チェックポイントに戻ります。
`
	delete checkpoint <checkpoint-id>
`
チェックポイントを削除します。

= 停止と継続
デバッガを使用することでプログラムを停止することができます。

== ブレークポイント、ウォッチポイント、キャッチポイント
- ブレークポイント
プログラム中の特定の場所で、そこに到達すると停止する。
- ウォッチポイント
式の値が変化したときに停止する。
- キャッチポイント
例外やライブラリロードなどで停止する。

=== ブレークポイントの設定
ブレークポイントは`break, b`コマンドで設定できます。さらに変数`$bpnum`にブレークポイントの数が保存されています。

一つのブレークポイントが複数のコードの位置にマッピングされることがあります。例えばC++のtemplateやオーバーロードなど。その場合、設定時にその数を出力します。

デバッグ中のプログラムがブレークポイントに到達すると、変数`$_hit_bpnum`と`$_hit_locno`がセットされます。

`
	break, b
`
引数無しで`break`コマンドを実行すると、選択されたスタックフレームの次に実行される命令にブレークポイントが設置されます。
`
	break ... [-force-condition] if <cond>
`
条件付きブレークポイントを設定します。このブレークポイントに到達したとき、`cond`の式がゼロでない場合にプログラムは停止します。
`-force-condition`を指定すると、式`cond`が無効な式でもブレークポイントを設置します。
`
	tbreak args
`
一回限りのブレークポイントを設置します。引数は`break`と同じです。このブレークポイントに一回プログラムが到達するとそのブレークポイントは自動的に消去されます。
`
	hbreak args
`
ハードウェアブレークポイントを設置します。
`
	thbreak args
`
一回限りのハードウェアブレークポイントを設置します。
`
	rbreak <regex>
`
正規表現`regex`にマッチするすべての関数にブレークポイントを設置します。`regex`に`.`を指定すればすべての関数にブレークポイントを設置できます。
`
	rbreak <file>:<reex>
`
ファイル名を指定して`rbreak`を実行します。
`
	info breakpoints [list...]
	info break [list...]
`
全てのブレークポイント、ウォッチポイント、トレースポイント、キャッチポイントを表示します。
`list`を指定すると指定したものだけを表示できます。

ブレークポイントは共有ライブラリを読み込んだ場合などに再計算されます。また、共有ライブラリロード以前にブレークポイントを設定しておくことも可能です。
`
	set breakpoint pending auto
`
通常の動作です。GDBがロケーションを解決できない場合、作成するかどうかをユーザに問い合わせます。
`
	set breakpoint pending on
	set breakpoint pending off
`
onの場合、解決できなくても作成します。offではしません。
以上の設定はブレークポイントを設定するときにだけ適用されます。一度設置されたブレークポイントは自動で再計算されます。
`
	set breakpoint auto-hw 'on|off'
`
自動でハードウェアブレークポイントを使用するかどうかの設定です。
`
	set breakpoint always-inserted 'off|on'
`
offがデフォルト値です。プログラムが停止したときにブレークポイント用に書き換えたプログラムコードを元に戻すかどうかの設定です。

=== ウォッチポイントの設定
ウォッチポイントで監視できるものは以下の通りです。
- 単一の変数
- 適切なデータ型にキャストされたアドレス
- 式
ウォッチポイントはその計算が可能になる前から設定できます。そして有効な値になったときにプログラムを停止します。

=== キャッチポイントの設定
=== ブレークポイントの削除
=== ブレークポイントを無効にする
=== ブレーク条件
=== ブレークポイントコマンドリスト
=== 動的printf
=== ブレークポイントをファイルに保存する方法
=== 静的プローブポイントの一覧表示
=== ブレークポイントを挿入できません。
=== ブレークポイントアドレスが調整されました...


== 継続とステップ
== 関数とファイルのスキップ
== シグナル
== スレッドストップ
