#set page(numbering: "1")
#set heading(numbering: "1.1")
#set text(size: 12pt, font: ("New Computer Modern", "Harano Aji Mincho"))

#outline(title: "目次")

= デバッガ
プログラムのバグ(bug)を取り除く(de-)ことをデバッグといいます。デバッグを行う手法はいくつかあり、例えばプログラム中に標準出力を行う命令を追加してデバッグを行うprintデバッガと呼ばれる方法があります。デバッガはデバッグを支援するツールで、プログラムの任意箇所での停止や、変数の値の表示や変更、スタックトレースやメモリ内容の監視など高度な機能によりデバッグを支援します。

C言語で書かれたプログラムに対応するデバッガはいくつか存在しており、有名なものにGDBとLLDBが存在します。このドキュメントではこの二つのデバッガについて基本的な使用方法の解説を行います。

= GDB
GDBはGnu Projectのデバッガです。

== GDBの起動
GDBを起動するには以下のいづれかのコマンドを使用します。起動後はコマンドを受け付けます。
`
	gdb [options] [executable-file [core-file or process-id]]
	gfb [options] --args <executable-file> [inferior-arguments ...]
`
`--args` を指定する場合、実行可能ファイルの後の引数(inferior-arguments) が実行時に渡されます。例えば `gdb --args gcc -O2 -c foo.c` は `gcc -O2 -c foo.c` の実行にデバッガをアタッチします。

optionsに指定できるオプションは `gdb -h` で確認できます。

=== ファイルオプション
GDBが起動すると、options以外の引数は実行ファイルとコアファイル(またはプロセスID)を指定するものとして読まれます。つまり`-se`、`-c` としてです。

/ `-symbols <file>, -s <file>`:
fileからシンボルテーブルを読み取ります。
/ `-exec <file>, -e <file>`: 
fileを実行ファイルとして読み込みます。
/ `-se <file>`: 
fileからシンボルテーブルを読み取り、実行ファイルとして使用します。
/ `-core <file>, -c <file>`: 
fileをコアダンプとして検査します。
/ `-pid <number>, -p <number>`: 
プロセスIDがnumberのプロセスにアタッチします。
/ `-command <file>, -x <file>`: 
fileからコマンドを実行します。
/ `-eval-command <command>, -ex <command>: `: 
単一のGDBコマンドを実行します。複数回指定可能です。
/ `-init-command <file>, -ix <file>`: 
下位ファイルをロードする前かつgdbinitロード後にfileからコマンドを実行します。
/ `-init-eval-command <command>, -iex <command>`: 
下位ファイルをロードする前かるgdbinitロード後にGDBコマンド`command`を実行します。
/ `-early-init-command <file>, -eix <file>`: 
出力生成前にファイルからコマンドを実行します。
/ `-early-init-eval-command <command>, -eiex <command>`: 
出力生成前にGDBコマンド`command`を実行します。
/ `-directory <directory>, -d <directory>`: 
directoryをソースファイルとスクリプトファイルを検索するパスに追加します。
/ `-readnow, -r`: 
各シンボルファイルのシンボルテーブル全体を起動時に読み取ります。デフォルトではこの機能はオフになっています。
/ `--readnever`: 
各シンボルファイルのシンボルテーブルを読み取らないようにします。このオプションをつけるとシンボリックデバッグが実行できなくなります。

=== モードオプション
GDBはさまざまなモードで実行できます。
/ `-nx, -n`: 
初期化ファイルにあるコマンドを実行しません。
/ `-nh`: 
ホームディレクトリ初期化ファイルにあるコマンドを実行しません。システム全体及びカレントディレクトリの初期化ファイルは実行されます。
/ `-quiet, -silent, -q`: 
起動時のメッセージを表示しません。これらメッセージはバッチモードでも表示されません。コマンドによりこのオプションを有向化することもできます。
/ `-batch`: 
バッチモードで実行します。`-x`で指定したコマンドファイルのコマンドがすべて実行された後、終了コード0を返して終了します(`-n`が指定されていない場合は初期化ファイルのコマンドも実行されます)。ファイル内のコマンド実行中にエラーが発生した場合は0以外のステータスコードを返して終了します。
/ `-batch-silent`: 
バッチモードで実行し、かつ全く標準出力への出力を行いません。
/ `-return-child-result`: 
GDBの終了ステータスをデバッグ中のプロセスの終了コードにします。ただし(1)GDBが異常終了した場合、(2)ユーザが明示的に終了ステータスを指定した場合、(3)子プロセスが実行されないか終了しない場合(終了ステータスは-1になる)の三つの場合を除きます。
/ `-nowindows, -nw`: 
GDBにGUIインターフェースがある場合、CUIのみを使用するように指定します。
/ `windows, -w`: 
GDBにGUIインターフェースがある場合、GUIインターフェースを使用します。
/ `-cd <directory>`: 
作業ディレクトリを`directory`に移動して実行します。
/ `-data-directory <directory>, -D <directory>`: 
`directory`をデータディレクトリ(GDBが補助ファイルを検索する場所)として実行します。
/ `-fullname, -f`: 
スタックフレーム表示時およびプロセス停止時に完全なファイル名と行番号を出力します。
/ `-annotate <level>`: 
GDB内の注釈レベルを設定します。これはプロンプト、式の値、ソース行、その他の出力とともにGDBが出力する情報の量を制御します。レベル0が通常、1がGnu Emacsで使用され非推奨、レベル3は最大の注釈です。
/ `--args`: 
実行ファイル以降の引数をすべて下位のコマンドライン引数として渡します。
/ `--baud <bps>, -b <bps>`: 
GDBがリモートデバッグに使用するシリアルインターフェイスの回線速度を設定します。
/ `-l <timeout>`: 
GDBがリモートデバッグに使用する通信のタイムアウト(単位:秒)を設定します。
/ `-tty <device>, -t <device>`: 
プログラムの標準入力と出力に`device` を使用して実行します。
/ `-tui`: 
TUI(Text User Interfaec) モードをアクティブにします。TUIはターミナル上の複数のテキストウィンドウを管理し、ソース、アセンブリ、レジスタ、およびコマンド出力を表示します。
/ `-interpreter <interp>`: 
制御プログラムまたはデバイスとのインターフェイスにインタープリター`interp`を使用します。このオプションはGDBをバックエンドとしてGDBと津伸によって設定されることを目的としています。
/ `-write`: 
実行ファイルとコアファイルを読み取り書き取りの両方で開きます。
/ `-statistics`: 
GDBは各コマンドを完了してプロンプトに戻った後、時間とメモリ使用量に関する統計情報を表示します。
/ `-configuration`: 
GDBはビルド時の構成パラメータの詳細を出力し、終了します。


=== 起動にGDBが行う動作
セッション起動時にGDBが行う処理を以下に示します。
1. 基本的な内部状態を初期化します。
2. ホームディレクトリにある初期初期化ファイルが存在する場合、コマンドを読み取ります。
3. `-eiex`と`-eix`で指定されたコマンドとコマンドファイルを指定された順番に実行します。
4. コマンドラインで指定されたコマンドインタープリターを設定します。
5. システム全体の初期化ファイルと初期化ディレクトリからファイルを読み取ります。
6. ホームディレクトリ内の初期化ファイルを読み取り、ファイル内のすべてのコマンドを実行します。
7. `-iex`および`-ix`で指定されたコマンドとコマンドファイルを指定された順番に実行します。通常`-ex`および`-x`を代わりに使用します。この方法ではGDB初期化ファイルが実行される前およびinferiorがロードされる前に設定を適用できます。
8. コマンドラインオプションとオペランドを処理します。
9. 現在の作業ディレクトリにある初期化ファイルを読み込んで実行します。
10. デバッグするまたはアタッチするプログラムまたはコアファイルが指定されている場合、GDBはプログラムまたはそのロードされた共有ライブラリ用に提供された自動ロードスクリプトをロードします。
11. `-ex`および`-x`で指定されたコマンド及びコマンドファイルを読み込んで実行します。
12. _history file_に記録されたコマンド履歴を読み取ります。

=== 初期化ファイル
GDB起動時にGDBはいくつかの初期化ファイルからコマンドを実行します。これらの初期化ファイルはコマンドファイルと同じ構文を使用し、同様に処理されます。

起動時にロードされる初期化ファイルのリストをロードされる順番で表示するには`gdb --help`が使用できます。

初期初期化ファイルは初期化プロセスの非常に速い段階でロードされます。ここでは`set`または`source`コマンドのみを配置できます。

ほかの一般の初期化ファイルは任意のコマンドを実行できます。

==== ホームディレクトリの初期初期化ファイル
GDBは最初にこれを探します。GDBがホームディレクトリ内を検索する場所はいくつかあり、これらの場所は順番に検索され、最初に見つかったファイルのみをロードします。MacOS以外では以下の場所が検索されます。
- `$XDG_CONFIG_HOME/gdb/gdbealyinit`
- `$HOME/.config/gdb/gdbealyinit`
- `$HOME/.gdbealyinit`
`-nx, -n`オプションでこれらの初期初期化ファイルを読むことを阻止できます。

==== システム全体の初期化ファイル
以下の二か所が検索され、これらは常にチェックされます。
/ `system.gdbinit`:
単一のシステム全体初期化ファイルです。 `--with-system-gdbinit` オプションで設定できます。
/ `system.gdbinit.d`: 
ディレクトリです。

==== ホームディレクトリ初期化ファイル
システム全体初期化ファイルを読んだ後、これを探します。以下の場所を検索し、最初に見つかったファイルのみをロードします。
MacOS以外では以下の場所が検索されます。
- `$XDG_CONFIG_HOME/gdb/gdbinit`
- `$HOME/.config/gdb/gdbinit`
- `$HOME/.gdbinit`

==== ローカルディレクトリ初期化ファイル
カレントディレクトリで`.gdbinit`ファイルを検索します。`-x, -ex`で指定したコマンドを除いて最後にロードされます。すでにホームディレクトリ初期化ファイルとして読み込まれている場合は再度ロードされることはありません。

== GDBの終了
GDBを終了するには `quit [expression]`, `exit [expression]` または `q` または `ctrl+d` で終了できます。`expression` に指定した値は終了コードとして帰ります。`ctrl+c`は実行中のGDBコマンドアクションを終了します。

== シェルコマンド
GDB起動中にシェルコマンドを使用することができます。
`
	shell <command-string>
	!<command-string>
`
`pipe` 命令を使用してgdbの出力を他のプログラムに繋ぐことができます。
`
	pipe [command] | <shell_command>
	| [command] | <shell_command>
	pipe -d <delim> <command> <delim> <shell_command>
	| -d <delim> <command> <delim> <shell_command>
`
`command` が `|` を含むときには -d で別の記号(列)を指定します。

== ロギング出力
GDBの出力をファイルに行うことができます。GDBにはロギングを制御するコマンドがいくつか用意されています。

/ `set loggging enabled [on|off]`: ロギングのオンオフ切り替え
/ `set logging file <file>`: 現在のログファイルの名前を変更。デフォルト値は `gdb.txt`
/ `set logging overwrite [on|off]`: 上書きか書き足しか(onで上書き)。デフォルト値は `off`
/ `set logging redirect [on|off]`: onにするとGDBの出力がログファイルにのみ行われる。デフォルト値は `off`
/ `set logging debugredirect [on|off]`: onにするとGDBデバッグの出力がログファイルにのみ行われる。デフォルト値は `off`
/ `show logging`: ロギングの設定を表示する

= GDBコマンド
GDBコマンドは曖昧性がなければコマンド名の最初の数文字のみで使用できます。また、`ret`(エンター)を入力すると特定のGDBコマンドを繰り返し実行できます。また、TABキーによる補完機能が有効です。

== コマンド構文
GDBコマンドは一行の長さ無制限の入力です。`command [args]` の形をしています。

`run` など一部コマンドを除いて空白行を入力すると直前のコマンドを繰り返します。`list` 及び `x` コマンドでは引数が変わります(???)。

== コマンド設定
多くのコマンドは変数及び設定で動作が変わります。これらの設定は `set` コマンドで変更できます。

gdbinitファイルに書き込むことで初期化時に設定できますし、対話中にコマンドを実行して設定することもできます。

`with`コマンドを使用して、コマンド呼び出しの期間中一時的に設定を変更することもできます。
`
	with <setting> [value] [-- command]
	w <setting> [value] [-- command]
`

== コマンド補完
GDBではTABキーによる補完が有効です。候補が唯一の場合は自動で入力が保管され、複数ある場合は候補が表示されます。TABを二回押して候補を表示する代わりに`esc ?`で表示することもできます。

以下のコマンドで補完候補の最大数を設定できます。デフォルト値は200です。
`
	set max-completions <limit>
`
`limit`には整数値または`unlimited`が指定できます。
`
	show max-completions
`
で現在の設定を確認できます。

== ファイル名引数
ファイル名をコマンドの引数として渡す場合、ファイル名に空白、ダブルクォート、シングルクォートが含まれていない場合は単純な文字列として記述できます。これらが含まれている場合、

== コマンドオプション
== ヘルプ
